#Maintainer: kevall474 <kevall474@tuta.io> <https://github.com/kevall474>
#Credits: Jan Alexander Steffens (heftig) <heftig@archlinux.org> ---> For the base PKGBUILD
#Credits: Andreas Radke <andyrtr@archlinux.org> ---> For the base PKGBUILD
#Credits: Linus Torvalds ---> For the linux kernel
#Credits: Joan Figueras <ffigue at gmail dot com> ---> For the base PKFBUILD
#Credits: Piotr Gorski <lucjan.lucjanov@gmail.com> <https://github.com/sirlucjan/kernel-patches> ---> For the patches and the base pkgbuild
#Credits: Tk-Glitch <https://github.com/Tk-Glitch> ---> For some patches
#Credits: Con Kolivas <kernel@kolivas.org> <http://ck.kolivas.org/> ---> For MuQSS patches
#Credits: Hamad Al Marri for the Cachy CPU scheduler patch <https://github.com/hamadmarri/cachy-sched> ---> For Cachy CPU Scheduler patch
#Credits: Alfred Chen <https://gitlab.com/alfredchen/projectc> ---> For the BMQ/PDS CPU Scheduler patch

################################# config ################################

#menuconfig ---> value = menuconfig
#nconfig ---> value = nconfig
#xconfig ---> value = xconfig
#gconfig ---> value = gconfig
#makeolddefconfig ---> value = makeolddefconfig
#The default is make olddefconfig

_config=olddefconfig

################################# CPU microarchtectures ################################

#Choose CPU microarchtectures

#Available CPU microarchitectures:
#0) Generic (default)
#1) AMD K6/K6-II/K6-III
#2) AMD Athlon/Duron/K7
#3) AMD Opteron/Athlon64/Hammer/K8
#4) AMD Opteron/Athlon64/Hammer/K8 with SSE3
#5) AMD 61xx/7x50/PhenomX3/X4/II/K10
#6) AMD Family 10h (Barcelona)
#7) AMD Family 14h (Bobcat)
#8) AMD Family 16h (Jaguar)
#9) AMD Family 15h (Bulldozer)
#10) AMD Family 15h (Piledriver)
#11) AMD Family 15h (Steamroller)
#12) AMD Family 15h (Excavator)
#13) AMD Family 17h (Zen)
#14) AMD Family 17h (Zen 2)
#15) Transmeta Crusoe
#16) Transmeta Efficeon
#17) IDT Winchip C6
#18) Winchip-2/Winchip-2A/Winchip-3
#19) AMD Elan
#20) Geode GX1 (Cyrix MediaGX)
#21) AMD Geode GX and LX
#22) Cyrix III or C3
#23) VIA C3 "Nehemiah"
#24) VIA C7
#25) Intel Pentium 4, Pentium D and older Nocona/Dempsey Xeon CPUs with Intel 64bit
#26) Intel Atom
#27) Intel Core 2 and newer Core 2 Xeons (Xeon 51xx and 53xx)
#28) Intel 1st Gen Core i3/i5/i7-family (Nehalem)
#29) Intel 1.5 Gen Core i3/i5/i7-family (Westmere)
#30) Intel Silvermont
#31) Intel Goldmont (Apollo Lake and Denverton)
#32) Intel Goldmont Plus (Gemini Lake)
#33) Intel 2nd Gen Core i3/i5/i7-family (Sandybridge)
#34) Intel 3rd Gen Core i3/i5/i7-family (Ivybridge)
#35) Intel 4th Gen Core i3/i5/i7-family (Haswell)
#36) Intel 5th Gen Core i3/i5/i7-family (Broadwell)
#37) Intel 6th Gen Core i3/i5/i7-family (Skylake)
#38) Intel 6th Gen Core i7/i9-family (Skylake X)
#39) Intel 8th Gen Core i3/i5/i7-family (Cannon Lake)
#40) Intel 8th Gen Core i7/i9-family (Ice Lake)
#41) Xeon processors in the Cascade Lake family
#42) Native optimizations autodetected by GCC

_microarchitecture=0

################################# CONFIG_STACK_VALIDATION ################################

#Enable/disable CONFIG_STACK_VALIDATION

#CONFIG_STACK_VALIDATION gives better stack traces. Also is enabled in all official kernel packages by Archlinux team
#Set value to n to disable
#Set value to y to enable
#default value is set to y

_config_stack_validation=y

################################# IKCONFIG ################################

#Enable/disable IKCONFIG following Arch's philosophy
#Enable access to the kernel configuration file through /proc/config.gz
#Set value to n to disable
#Set value to y to enable
#default value is set to y

_ikconfig=y

################################# NUMA ################################

#Disable/enable NUMA

#Disable NUMA since most users do not have multiple processors. Breaks CUDA/NvEnc.
#Archlinux and Xanmod enable it by default.
#NUMA is optimized for multi-socket motherboards.
#A single multi-core CPU actually runs slower with NUMA enabled.
#Set value to y to disable (possibly increase performance)
#Set value to n to enable
#default value is set to y

_disable_numa=y

################################# FUNCTION_TRACER/GRAPH_TRACER ################################

#Disable/enable FUNCTION_TRACER/GRAPH_TRACER

#For performance you can disable FUNCTION_TRACER/GRAPH_TRACER. Limits debugging and analyzing of the kernel.
#Set value to y to disable (possibly increase performance)
#Set value to n to enable
#default value is set to y

_disable_tracers=y

################################# CONFIG_USER_NS_UNPRIVILEGED ################################

#Enable/disable CONFIG_USER_NS_UNPRIVILEGED

#Disable CONFIG_USER_NS_UNPRIVILEGED
#Set value to y to disable
#Set value to n to enable
#default value is set to y

_disable_ns=y

################################# CPU Governer ################################

#Performance ---> value = performance
#POWERSAVE ---> value = powersave
#USERSPACE ---> value = userspace
#ONDEMAND ---> value = ondemand
#CONSERVATIVE ---> value = conservative
#SCHEDUTIL ---> value = schedutil
#Default value is set to performance

_cpu_gov=performance

################################# CPU DEVFREQ GOV ################################

#SIMPLE_ONDEMAND ---> simple_ondemand
#PERFORMANCE ---> performance
#POWERSAVE ---> powersave
#USERSPACE ---> userspace
#PASSIVE ---> passive
#Defaut value is set to performance

_cpu_devfreq_gov=performance

################################# CONFIG_PCIEASPM ################################

#DEFAULT ---> default
#POWERSAVE ---> powersave
#SUPERSAVE ---> supersave
#PERFORMANCE ---> performance
#DEfault is set to performance

_config_pciaspm=performance

################################# CC_OPTOMIZE ################################

#for_performance
#for_size
#for_performance_03
#Default is set to "for_performance_03"
_cc_optimize=for_performance_03

################################# CPU HZ ################################

#100
#250
#350
#750
#1000
#Default value is set to 1000

_cpu_hz=1000

################################# I/O Scheduler ################################
########### In this section you need to have at least one enable ###########

#BFQ (Budget Fair Queueing)
#BFQ is a proportional-share I/O scheduler, with some extra
#low-latency capabilities. In addition to cgroups support (blkio or io
#controllers), BFQ's main features are:
#BFQ guarantees a high system and application responsiveness, and a
#low latency for time-sensitive applications, such as audio or video
#players;
#BFQ distributes bandwidth, and not just time, among processes or
#groups (switching back to time distribution when needed to keep
#throughput high).

#Kyber
#The Kyber I/O scheduler is a low-overhead scheduler suitable for
#multiqueue and other fast devices. Given target latencies for reads and
#synchronous writes, it will self-tune queue depths to achieve that
#goal.

#Dealine I/O Scheduler
#The main goal of the Deadline scheduler is to guarantee a start service time for a request.
#It does so by imposing a deadline on all I/O operations to prevent starvation of requests. It
#also maintains two deadline queues, in addition to the sorted queues (both read and write). Deadline
#queues are basically sorted by their deadline (the expiration time), while the sorted queues are sorted
#by the sector number.

#Disable Kyber I/O scheduler
# Set variable disable_kyber n to keep enable (stock kernel)
#                            y to disable
#default value is set to y
_disable_kyber=y

#Disable Deadline I/O scheduler
# Set variable disable_mq_dealine n to keep enable (stock kernel)
#                                 y to disable
#default value is set to y
_disable_mq_deadline=y

#Disable BFQ I/O scheduler
# Set variable disable_bfq n to keep enable (stock kernel)
#                          y to disable
#default value is set to n
_disable_bfq=n

################################# CPU Scheduler ################################

#MuQSS - The Multiple Queue Skiplist Scheduler by Con Kolivas.

#MuQSS is a per-cpu runqueue variant of the original BFS scheduler with one 8 level skiplist per
#runqueue, and fine grained locking for much more scalability.

#The goal of the Multiple Queue Skiplist Scheduler, referred to as MuQSS from here on (pronounced mux)
#is to completely do away with the complex designs of the past for the cpu process scheduler and instead implement
#one that is very simple in basic design. The main focus of MuQSS is to achieve excellent desktop interactivity and
#responsiveness without heuristics and tuning knobs that are difficult to understand, impossible to model and predict
#the effect of, and when tuned to one workload cause massive detriment to another, while still being scalable to many
#CPUs and processes.

#MuQSS configuration info

#config RQ_NONE
#bool "No sharing"
#This is the default behaviour where the CPU scheduler has one runqueue
#per CPU, whether it is a physical or logical CPU (hyperthread).
#This can still be enabled runtime with the boot parameter rqshare=none
#If unsure, say N.

#config RQ_SMT
#bool "SMT (hyperthread) siblings"
#depends on SCHED_SMT && SCHED_MUQSS
#With this option enabled, the CPU scheduler will have one runqueue
#shared by SMT (hyperthread) siblings. As these logical cores share
#one physical core, sharing the runqueue resource can lead to decreased
#overhead, lower latency and higher throughput.
#This can still be enabled runtime with the boot parameter #rqshare=smt
#If unsure, say N.

#onfig RQ_MC
#bool "Multicore siblings"
#depends on SCHED_MC && SCHED_MUQSS
#With this option enabled, the CPU scheduler will have one runqueue
#shared by multicore siblings in addition to any SMT siblings.
#As these physical cores share caches, sharing the runqueue resource
#will lead to lower latency, but its effects on overhead and throughput
#are less predictable. As a general rule, 6 or fewer cores will likely
#benefit from this, while larger CPUs will only derive a latency
#benefit. If your workloads are primarily single threaded, this will
#possibly worsen throughput. If you are only concerned about latency
#then enable this regardless of how many cores you have.
#This can still be enabled runtime with the boot parameter #rqshare=mc
#If unsure, say Y.

#config RQ_MC_LLC
#bool "Multicore siblings (LLC)"
#depends on SCHED_MC && SCHED_MUQSS
#With this option enabled, the CPU scheduler will behave similarly as
#with "Multicore siblings".
#This option takes LLC cache into account when scheduling tasks.
#Option may benefit CPUs with multiple LLC caches, such as Ryzen
#and Xeon CPUs.
#This can still be enabled runtime with the boot parameter rqshare=llc
#If unsure, say N.

#config RQ_SMP
#bool "Symmetric Multi-Processing"
#depends on SMP && SCHED_MUQSS
#With this option enabled, the CPU scheduler will have one runqueue
#shared by all physical CPUs unless they are on separate NUMA nodes.
#As physical CPUs usually do not share resources, sharing the runqueue
#will normally worsen throughput but improve latency. If you only
#care about latency enable this.
#This can still be enabled runtime with the boot parameter #rqshare=smp
#If unsure, say N.

#config RQ_ALL
#bool "NUMA"
#depends on SMP && SCHED_MUQSS
#With this option enabled, the CPU scheduler will have one runqueue
#regardless of the architecture configuration, including across NUMA
#nodes. This can substantially decrease throughput in NUMA
#configurations, but light NUMA designs will not be dramatically
#affected. This option should only be chosen if latency is the prime
#concern.
#This can still be enabled runtime with the boot parameter rqshare=all
#If unsure, say N.

#config SHARERQ
#int
#default 0 if RQ_NONE
#default 1 if RQ_SMT
#default 2 if RQ_MC
#default 3 if RQ_MC_LLC
#default 4 if RQ_SMP
#default 5 if RQ_ALL

#Choice are
#none
#smt
#mc
#mc_llc
#rq_smp
#rq_all
#default is set to mc

_config_rq=mc

################################

#Cachy-sched is a linux scheduler that is based on Highest Response Ratio Next (HRRN) policy. About Cachy Scheduler

#Each CPU has its own runqueue.
#NORMAL runqueue is a linked list of sched_entities (instead of RB-Tree).
#RT and other runqueues are just the same as the CFS's.
#A task gets preempted when any task in the runqueue has a higher HRRN.
#Wake up tasks preempt currently running tasks if its HRRN value is higher.
#This scheduler is designed for desktop usage since it is about responsiveness.

#enable idle balance patch
#y ---> to enable
#leave empty to disable
#default value is set to "y"
_idle_balance=y

################################

#BMQ
#BitMap Queue CPU scheduler, referred to as BMQ from here on, is an evolution of previous Priority and
#Deadline based Skiplist multiple queue scheduler(PDS), and inspired by Zircon scheduler. The goal of it
#is to keep the scheduler code simple, while efficiency and scalable for interactive tasks, such as desktop,
#movie playback and gaming etc.
#BMQ use per CPU run queue design, each CPU(logical) has it's own run queue, each CPU is responsible for scheduling
#the tasks that are putting into it's run queue.

################################

#PDS
#Priority and Deadline based Skiplist multiple queue scheduler, referred to as PDS from here on, is developed upon
#the enhancement patchset VRQ(Variable Run Queue) for BFS(Brain Fuck Scheduler by Con Kolivas). PDS inherits the
#existing design from VRQ and inspired by the introduction of skiplist data structure to the scheduler by Con Kolivas.
#However, PDS is different from MuQSS(Multiple Queue Skiplist Scheduler, the successor after BFS) in many ways.
#PDS is designed to make the cpu process scheduler code to be simple, but while efficiency and scalable. Be Simple,
#the scheduler code will be easy to be read and the behavious of scheduler will be easy to predict. Be efficiency,
#the scheduler shall be well balance the thoughput performance and task interactivity at the same time for different properties
#the tasks behave. Be scalable, the performance of the scheduler should be in good shape with the glowing of workload or with the
#growing of the cpu numbers.

#Variable to set the CPU scheduler
# 'cachy' ---> To use the Cachy CPU Scheduler
# 'muqss' ---> To use the MuQSS CPU Scheduler
# 'pds' ---> To use the PDS CPU Scheduler
# 'bmq' ---> To use the BMQ CPU Scheduler
# 'none' ---> To not use alternative CPU Scheduler
#Default is set to none

if [ -z ${_cpu_sched+x} ]; then
  _cpu_sched=none
fi

#use : env _cpu_sched=(cachy,muqss,pds,bmq or none) makepkg -s ---> to enable/disable cpu scheduler

################################# Compiler ################################

#Choice are :
#gcc
#gcc+llvm
#clang
#clang+llvm
#Default is set to gcc
if [ -z ${_compiler+x} ]; then
  _compiler=clang+llvm
fi

#use : env _compiler=(gcc,gcc+llvm,clang or clang+llvm) makepkg -s ---> to switch between compiler

################################# Arch ################################

ARCH=x86

################################# CC/CXX/HOSTCC/HOSTCXX ################################

if [[ "$_compiler" = "gcc" ]]; then
CC=gcc
CXX=g++
HOSTCC=gcc
HOSTCXX=g++
buildwith="build with GCC"
elif [[ "$_compiler" = "gcc+llvm" ]]; then
CC=gcc
CXX=g++
HOSTCC=gcc
HOSTCXX=g++
buildwith="build with GCC/LLVM"
elif [[ "$_compiler" = "clang" ]]; then
CC=clang
CXX=clang++
HOSTCC=clang
HOSTCXX=clang++
buildwith="build with CLANG"
elif [[ "$_compiler" = "clang+llvm" ]]; then
CC=clang
CXX=clang++
HOSTCC=clang
HOSTCXX=clang++
buildwith="build with CLANG/LLVM"
fi

###################################################################################

if [[ $_cpu_sched = "cachy" ]]; then
  pkgbase=linux-kernel-cachy
elif [[ $_cpu_sched = "muqss" ]]; then
  pkgbase=linux-kernel-muqss
elif [[ $_cpu_sched = "bmq" ]]; then
  pkgbase=linux-kernel-bmq
elif [[ $_cpu_sched = "pds" ]]; then
  pkgbase=linux-kernel-pds
elif [[ $_cpu_sched = "none" ]]; then
  pkgbase=linux-kernel
fi
pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done
pkgver=5.9.14
pkgrel=1
major=5.9
arch=(x86_64)
url="https://www.kernel.org/"
license=(GPL-2.0)
makedepends=("bison" "flex" "valgrind" "git" "cmake" "make" "extra-cmake-modules" "libelf" "elfutils"
             "python" "python-appdirs" "python-mako" "python-evdev" "python-sphinx_rtd_theme" "python-graphviz" "python-sphinx"
             "clang" "lib32-clang" "bc" "gcc" "gcc-libs" "lib32-gcc-libs" "glibc" "lib32-glibc" "pahole" "patch" "gtk3" "llvm" "lib32-llvm"
             "llvm-libs" "lib32-llvm-libs" "lld" "kmod" "libmikmod" "lib32-libmikmod" "xmlto" "xmltoman" "graphviz" "imagemagick" "imagemagick-doc"
             "rsync" "cpio" "inetutils")
patchsource=https://raw.githubusercontent.com/kevall474/kernel-patches/main/${major}/
source=("https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-${pkgver}.tar.xz"
        "config"
        "${patchsource}choose-gcc-optimization.sh"
        "${patchsource}0001-ZEN-Add-sysctl-and-CONFIG-to-disallow-unprivileged-CLONE_NEWUSER.patch"
        "${patchsource}0001-LL-kconfig-add-750Hz-timer-interrupt-kernel-config-o.patch"
        "${patchsource}0005-Disable-CPU_FREQ_GOV_SCHEDUTIL.patch"
        "${patchsource}0001-sched-autogroup-Add-kernel-parameter-and-config-opti.patch"
        "${patchsource}0001-ZEN-Add-VHBA-driver.patch"
        "${patchsource}5.9-ll-reverts-ver5.patch"
        "${patchsource}5.9-bfq-dev-lucjan-v13-r2K201022.patch"
        "${patchsource}0001-block-patches.patch"
        "${patchsource}0001-futex-patches.patch"
        "${patchsource}0001-clearlinux-patches.patch"
        "${patchsource}0001-btrfs-patches.patch"
        "${patchsource}0011-ZFS-fix.patch"
        "${patchsource}0001-fs-patches.patch"
        "${patchsource}0001-ntfs3-patches.patch")
md5sums=("4727d38ee292c83c230a30a1db067983"  #linux-5.9.14.tar.xz
         "4e88d6abe73b592b95641abb97c93d6f"  #config version 5.9.11
         "b3f0a4804b6fe031f674988441c1af35"  #choose-gcc-optimization.sh
         "a724ee14cb7aee1cfa6e4d9770c94723"  #0001-ZEN-Add-sysctl-and-CONFIG-to-disallow-unprivileged-CLONE_NEWUSER.patch
         "d15597054a4c5e405f980d07d5eac11a"  #0001-LL-kconfig-add-750Hz-timer-interrupt-kernel-config-o.patch
         "f99b82d6f424d1a729a9b8c5a1be2b84"  #0005-Disable-CPU_FREQ_GOV_SCHEDUTIL.patch
         "34764d6a1af6ab2e06ef6efa95aaa467"  #0001-sched-autogroup-Add-kernel-parameter-and-config-opti.patch
         "a0188e575abe3f27bde9ec09462b067e"  #0001-ZEN-Add-VHBA-driver.patch
         "3ea66f6bbaa249c02aacca01894109ad"  #5.9-ll-reverts-ver5.patch. Apply revert patch to apply bfq-dev-lucjan patches
         "fdf17f2ec486a20ef18b61eecf5cc9cc"  #5.9-bfq-dev-lucjan-v13-r2K201022.patch
         "35db7bfb80ed2867b2e8d5ed92cadb31"  #0001-block-patches.patch
         "c97b042c437883db1e768ff474e8b35c"  #0001-futex-patches.patch
         "eb812a74ec92add2108b48f5a9f048fc"  #0001-clearlinux-patches.patch
         "ad0dd4477201efb9fa86b33231ce62d8"  #0001-btrfs-patches.patch
         "c19fd76423bfc4af45d99585cedb2623"  #0011-ZFS-fix.patch
         "656de58729054bb71c9dc5dee737e589"  #0001-fs-patches.patch
         "39ea219cf88b984395006db9cf638304") #0001-ntfs3-patches.patch
if [[ "$_cc_optimize" = "for_performance_03" ]]; then
source+=("${patchsource}0002-init-Kconfig-enable-O3-for-all-arches.patch")
md5sums+=("5ef95c9aa1a3010b57c9be03f8369abb") #0002-init-Kconfig-enable-O3-for-all-arches.patch
fi
if [[ $_cpu_sched = "cachy" ]]; then
source+=("${patchsource}cachy-5.9-r8.patch")
md5sums+=("c0f15019b0fcacc465aa5eea2c207c1c") #cachy-5.9-r8.patch
  if [[ $_idle_balance = "y" ]]; then
    source+=("${patchsource}02-idle_balance.patch")
    md5sums+=("933f282baaf71fbfa8d404e9d4404bb0")  #02-idle_balance.patch
  fi
elif [[ $_cpu_sched = "muqss" ]]; then
source+=("${patchsource}0001-MultiQueue-Skiplist-Scheduler-v0.204.patch"
         "${patchsource}0002-Make-preemptible-kernel-default.patch"
         "${patchsource}0003-Expose-vmsplit-for-our-poor-32-bit-users.patch"
         "${patchsource}0004-Create-highres-timeout-variants-of-schedule_timeout-.patch"
         "${patchsource}0005-Special-case-calls-of-schedule_timeout-1-to-use-the-.patch"
         "${patchsource}0006-Convert-msleep-to-use-hrtimers-when-active.patch"
         "${patchsource}0007-Replace-all-schedule-timeout-1-with-schedule_min_hrt.patch"
         "${patchsource}0008-Replace-all-calls-to-schedule_timeout_interruptible-.patch"
         "${patchsource}0009-Replace-all-calls-to-schedule_timeout_uninterruptibl.patch"
         "${patchsource}0010-Don-t-use-hrtimer-overlay-when-pm_freezing-since-som.patch"
         "${patchsource}0012-Make-threaded-IRQs-optionally-the-default-which-can-.patch"
         "${patchsource}0014-Swap-sucks.patch"
         "${patchsource}0015-Make-nohz_full-not-be-picked-up-as-a-default-config-.patch")
md5sums+=("97b4c6bc474ae6181e58a0ab1ce1d096"  #0001-MultiQueue-Skiplist-Scheduler-v0.204.patch
          "01d3e091ded11ed61ed35899e3c06989"  #0002-Make-preemptible-kernel-default.patch
          "322f8444650e41fd40175693749b1592"  #0003-Expose-vmsplit-for-our-poor-32-bit-users.patch
          "55adeb5b6f05a3c666568537ad663fb8"  #0004-Create-highres-timeout-variants-of-schedule_timeout-.patch
          "a221ad4e6f0f2c62413c0a90945492d5"  #0005-Special-case-calls-of-schedule_timeout-1-to-use-the-.patch
          "ced32172ce6d7c8d891750ca3bbbbef2"  #0006-Convert-msleep-to-use-hrtimers-when-active.patch
          "11d4479ce9ac7c7a5cb8478101a5dce8"  #0007-Replace-all-schedule-timeout-1-with-schedule_min_hrt.patch
          "e9a4d9d8214ab2aaa647a8cfaa23d668"  #0008-Replace-all-calls-to-schedule_timeout_interruptible-.patch
          "bf5700621fe1b5830fe1188475636ef2"  #0009-Replace-all-calls-to-schedule_timeout_uninterruptibl.patch
          "f35e7618fb95c181f367b026f12973ea"  #0010-Don-t-use-hrtimer-overlay-when-pm_freezing-since-som.patch
          "add2a95dbe9705c4f0f49feb1f447b81"  #0012-Make-threaded-IRQs-optionally-the-default-which-can-.patch
          "46ab9d4d09b20f6604e33215a27c27af"  #0014-Swap-sucks.patch
          "a04390dfc0db2af7f9d454535bc012f4") #0015-Make-nohz_full-not-be-picked-up-as-a-default-config-.patch
elif [[ $_cpu_sched = "bmq" ]]; then
source+=("${patchsource}0009-prjc_v5.9-r3.patch")
md5sums+=("166c44ab4a410d348fce665a67b1bec7")  #0009-prjc_v5.9-r3.patch
elif [[ $_cpu_sched = "pds" ]]; then
source+=("${patchsource}0009-prjc_v5.9-r3.patch")
md5sums+=("166c44ab4a410d348fce665a67b1bec7")  #0009-prjc_v5.9-r3.patch
fi

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=${pkgbase}
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare(){
  cd linux-${pkgver}

  # Apply any patch
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  # Copy the config file first
  # Copy "${srcdir}"/config to linux-${pkgver}/.config
  msg2 "Copy "${srcdir}"/config to linux-${pkgver}/.config"
  cp "${srcdir}"/config .config

  # CONFIG_STACK_VALIDATION gives better stack traces. Also is enabled in all official kernel packages by Archlinux team
  if [[ $_config_stack_validation = "y" ]]; then
    msg2 "Enable CONFIG_STACK_VALIDATION gives better stack traces... Also is enabled in all official kernel packages by Archlinux team"
    scripts/config --enable CONFIG_STACK_VALIDATION
  elif [[ $_config_stack_validation = "n" ]]; then
     msg2 "Disable CONFIG_STACK_VALIDATION"
     scripts/config --disable CONFIG_STACK_VALIDATION
  fi

  # Enable IKCONFIG following Arch's philosophy
  # Enable access to the kernel configuration file through /proc/config.gz
  if [[ $_ikconfig = "y" ]]; then
    msg2 "Enable CONFIG_IKCONFIG/CONFIG_IKCONFIG_PROC following Arch's philosophy... Enable access to the kernel configuration file through /proc/config.gz"
    scripts/config --enable CONFIG_IKCONFIG
    scripts/config --enable CONFIG_IKCONFIG_PROC
  elif [[ $_ikconfig = "n" ]]; then
     msg2 "Disable CONFIG_STACK_VALIDATION..."
    scripts/config --disable CONFIG_IKCONFIG
    scripts/config --disable CONFIG_IKCONFIG_PROC
  fi

  # Enable/Disable NUMA
  if [[ $_disable_numa = "y" ]]; then
    msg2 "Disable NUMA since most users do not have multiple processors... Breaks CUDA/NvEnc..."
    scripts/config --disable CONFIG_NUMA
  elif [[ $_disable_numa = "n" ]]; then
    msg2 "Enable NUMA..."
    scripts/config --enable CONFIG_NUMA
  fi

  # Disable/enable FUNCTION_TRACER/GRAPH_TRACER
  if [[ "$_disable_tracers" = "y" ]]; then
    msg2 "Disabling FUNCTION_TRACER/GRAPH_TRACER... Limits debugging and analyzing of the kernel"
    scripts/config --disable CONFIG_FUNCTION_TRACER
    scripts/config --disable CONFIG_STACK_TRACER
  elif [[ "$_disable_tracers" = "n" ]]; then
    msg2 "Enable FUNCTION_TRACER/GRAPH_TRACER..."
    scripts/config --enable CONFIG_FUNCTION_TRACER
    scripts/config --enable CONFIG_STACK_TRACER
  fi

  # Enable/Disable CONFIG_USER_NS_UNPRIVILEGED
  if [[ "$_disable_ns" = "y" ]]; then
    msg2 "Disabling CONFIG_USER_NS_UNPRIVILEGED..."
    scripts/config --disable CONFIG_USER_NS_UNPRIVILEGED
  elif [[ "$_disable_ns" = "n" ]]; then
    msg2 "Enable CONFIG_USER_NS_UNPRIVILEGED..."
    scripts/config --enable CONFIG_USER_NS_UNPRIVILEGED
  fi

  # Set CPU Governor
  msg2 "Set CPU Governor"
  if [[ $_cpu_gov = "performance" ]]; then
    msg2 "Enable CPU_FREQ_DEFAULT_GOV_PERFORMANCE and CONFIG_CPU_FREQ_GOV_PERFORMANCE..."
    scripts/config --enable CONFIG_CPU_FREQ
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
  elif [[ $_cpu_gov = "powersave" ]]; then
    msg2 "Enable CPU_FREQ_DEFAULT_GOV_POWERSAVE and CONFIG_CPU_FREQ_GOV_POWERSAVE..."
    scripts/config --enable CONFIG_CPU_FREQ
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
  elif [[ $_cpu_gov = "userspace" ]]; then
    msg2 "Enable CPU_FREQ_DEFAULT_GOV_USERSPACE and CONFIG_CPU_FREQ_GOV_USERSPACE..."
    scripts/config --enable CONFIG_CPU_FREQ
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
  elif [[ $_cpu_gov = "ondemand" ]]; then
    msg2 "Enable CPU_FREQ_DEFAULT_GOV_ONDEMAND and CONFIG_CPU_FREQ_GOV_ONDEMAND..."
    scripts/config --enable CONFIG_CPU_FREQ
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --enable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
  elif [[ $_cpu_gov = "conservative" ]]; then
    msg2 "Enable CPU_FREQ_DEFAULT_GOV_CONSERVATIVE and CONFIG_CPU_FREQ_GOV_CONSERVATIVE..."
    scripts/config --enable CONFIG_CPU_FREQ
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
  elif [[ $_cpu_gov = "schedutil" ]]; then
    msg2 "Enable CPU_FREQ_DEFAULT_GOV_SCHEDUTIL and CONFIG_CPU_FREQ_GOV_SCHEDUTIL..."
    scripts/config --enable CONFIG_CPU_FREQ
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --enable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
  fi

  # Set CPU DEVFREQ GOV
  msg2 "Set CPU DEVFREQ GOV"
  if [[ $_cpu_devfreq_gov = "simple_ondemand" ]]; then
    msg2 "Enable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND..."
    scripts/config --enable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
  elif [[ $_cpu_devfreq_gov = "performance" ]]; then
    msg2 "Enable CONFIG_DEVFREQ_GOV_PERFORMANCE..."
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --enable CONFIG_DEVFREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
  elif [[ $_cpu_devfreq_gov = "powersave" ]]; then
    msg2 "Enable CONFIG_DEVFREQ_GOV_POWERSAVE..."
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
    scripts/config --enable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
  elif [[ $_cpu_devfreq_gov = "userspace" ]]; then
    msg2 "Enable CONFIG_DEVFREQ_GOV_USERSPACE..."
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --enable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
  elif [[ $_cpu_devfreq_gov = "passive" ]]; then
    msg2 "Enable CONFIG_DEVFREQ_GOV_PASSIVE..."
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --enable CONFIG_DEVFREQ_GOV_PASSIVE
  fi

  # Set CONFIG_PCIEASPM
  msg2 "Enable CONFIG_PCIEASPM..."
  scripts/config --enable CONFIG_PCIEASPM
  if [[ "$_config_pciaspm" = "default" ]]; then
    msg2 "Enable CONFIG_PCIEASPM_DEFAULT..."
    scripts/config --enable CONFIG_PCIEASPM_DEFAULT
    scripts/config --disable CONFIG_PCIEASPM_POWERSAVE
    scripts/config --disable CONFIG_PCIEASPM_POWER_SUPERSAVE
    scripts/config --disable CONFIG_PCIEASPM_PERFORMANCE
  elif [[ "$_config_pciaspm" = "powersave" ]]; then
    msg2 "Enable CONFIG_PCIEASPM_POWERSAVE..."
    scripts/config --disable CONFIG_PCIEASPM_DEFAULT
    scripts/config --enable CONFIG_PCIEASPM_POWERSAVE
    scripts/config --disable CONFIG_PCIEASPM_POWER_SUPERSAVE
    scripts/config --disable CONFIG_PCIEASPM_PERFORMANCE
  elif [[ "$_config_pciaspm" = "supersave" ]]; then
    msg2 "Enable CONFIG_PCIEASPM_SUPERSAVE..."
    scripts/config --disable CONFIG_PCIEASPM_DEFAULT
    scripts/config --disable CONFIG_PCIEASPM_POWERSAVE
    scripts/config --enable CONFIG_PCIEASPM_POWER_SUPERSAVE
    scripts/config --disable CONFIG_PCIEASPM_PERFORMANCE
  elif [[ "$_config_pciaspm" = "performance" ]]; then
    msg2 "Enable CONFIG_PCIEASPM_PERFORMANCE..."
    scripts/config --disable CONFIG_PCIEASPM_DEFAULT
    scripts/config --disable CONFIG_PCIEASPM_POWERSAVE
    scripts/config --disable CONFIG_PCIEASPM_POWER_SUPERSAVE
    scripts/config --enable CONFIG_PCIEASPM_PERFORMANCE
  fi

  #Set CC_OPTOMIZE
  msg2 "Set CC_OPTIMIZE"
  if [[ "$_cc_optimize" = "for_performance" ]]; then
    msg2 "Enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE..."
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_03
    scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
  elif [[ "$_cc_optimize" = "for_performance_03" ]]; then
    msg2 "Enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_03..."
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
    scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_03
  elif [[ "$_cc_optimize" = "for_size" ]]; then
    msg2 "Enable CONFIG_CC_OPTIMIZE_FOR_SIZE..."
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_03
    scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_SIZE
  fi

  # Set CONFIG_HZ
  msg2 "Set CONFIG_HZ"
  if [[ $_cpu_hz = "100" ]]; then
    msg2 "Enable CONFIG_HZ_100..."
    scripts/config --enable CONFIG_HZ_100
    scripts/config --set-val CONFIG_HZ 100
    scripts/config --disable CONFIG_HZ_250
    scripts/config --disable CONFIG_HZ_300
    scripts/config --disable CONFIG_HZ_750
    scripts/config --disable CONFIG_HZ_1000
  elif [[ $_cpu_hz = "250" ]]; then
    msg2 "Enable CONFIG_HZ_250..."
    scripts/config --enable CONFIG_HZ_250
    scripts/config --set-val CONFIG_HZ 250
    scripts/config --disable CONFIG_HZ_300
    scripts/config --disable CONFIG_HZ_750
    scripts/config --disable CONFIG_HZ_100
    scripts/config --disable CONFIG_HZ_1000
  elif [[ $_cpu_hz = "300" ]]; then
    msg2 "Enable CONFIG_HZ_300..."
    scripts/config --enable CONFIG_HZ_300
    scripts/config --set-val CONFIG_HZ 300
    scripts/config --disable CONFIG_HZ_250
    scripts/config --disable CONFIG_HZ_750
    scripts/config --disable CONFIG_HZ_100
    scripts/config --disable CONFIG_HZ_1000
  elif [[ $_cpu_hz = "750" ]]; then
    msg2 "Enable CONFIG_HZ_750..."
    scripts/config --enable CONFIG_HZ_750
    scripts/config --set-val CONFIG_HZ 750
    scripts/config --disable CONFIG_HZ_300
    scripts/config --disable CONFIG_HZ_100
    scripts/config --disable CONFIG_HZ_250
    scripts/config --disable CONFIG_HZ_1000
  elif [[ $_cpu_hz = "1000" ]]; then
    msg2 "Enable CONFIG_HZ_1000..."
    scripts/config --enable CONFIG_HZ_1000
    scripts/config --set-val CONFIG_HZ 1000
    scripts/config --disable CONFIG_HZ_300
    scripts/config --disable CONFIG_HZ_750
    scripts/config --disable CONFIG_HZ_250
    scripts/config --disable CONFIG_HZ_100
  fi

  # Enable/disable Kyber I/O scheduler
  if [[ "$_disable_kyber" = "y" ]]; then
    msg2 "Disabling Kyber I/O scheduler..."
    scripts/config --disable CONFIG_MQ_IOSCHED_KYBER
  elif [[ "$_disable_kyber" = "n" ]]; then
    msg2 "Enable Kyber I/O scheduler..."
    scripts/config --enable CONFIG_MQ_IOSCHED_KYBER
  fi

  # Enable/disable MQ-Deadline I/O scheduler
  if [[ "$_disable_mq_deadline" = "y" ]]; then
    msg2 "Disabling Deadline I/O scheduler..."
    scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE
    scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT
  elif [[ "$_disable_mq_deadline" = "n" ]]; then
    msg2 "Enable Deadline I/O scheduler..."
    scripts/config --enable CONFIG_MQ_IOSCHED_DEADLINE
    scripts/config --enable CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT
  fi

  # Enable/disable BFQ I/O scheduler
  if [[ "$_disable_bfq" = "y" ]]; then
    msg2 "Disabling BFQ I/O scheduler..."
    scripts/config --disable CONFIG_IOSCHED_BFQ
    scripts/config --disable CONFIG_BFQ_GROUP_IOSCHED
    scripts/config --disable CONFIG_BFQ_CGROUP_DEBUG
  elif [[ "$_disable_bfq" = "n" ]]; then
    msg2 "Enable BFQ I/O scheduler..."
    scripts/config --enable CONFIG_IOSCHED_BFQ
    scripts/config --enable CONFIG_BFQ_GROUP_IOSCHED
    scripts/config --enable CONFIG_BFQ_CGROUP_DEBUG
  fi

  if [[ $_cpu_sched = "cachy" ]]; then
    msg2 "Enable Cachy CPU scheduler..."
    scripts/config --disable CONFIG_NUMA
    scripts/config --disable FAIR_GROUP_SCHED
    scripts/config --disable CONFIG_FAIR_GROUP_SCHED
    scripts/config --enable CONFIG_CACHY_SCHED
  elif [[ $_cpu_sched = "muqss" ]]; then
    msg2 "Enable MuQSS..."
    if [[ $_config_rq = "none" ]]; then
      scripts/config --enable CONFIG_SCHED_MC
      scripts/config --enable CONFIG_SCHED_SMT
      scripts/config --enable CONFIG_SMP
      scripts/config --enable CONFIG_SCHED_MC_PRIO
      scripts/config --enable CONFIG_SCHED_MUQSS
      scripts/config --enable CONFIG_RQ_NONE
      scripts/config --disable CONFIG_RQ_SMT
      scripts/config --disable CONFIG_RQ_MC
      scripts/config --disable CONFIG_RQ_MC_LLC
      scripts/config --disable CONFIG_RQ_SMP
      scripts/config --disable CONFIG_RQ_ALL
      scripts/config --set-val CONFIG_SHARERQ 0
    elif [[ $_config_rq = "smt" ]]; then
      scripts/config --enable CONFIG_SCHED_MC
      scripts/config --enable CONFIG_SCHED_SMT
      scripts/config --enable CONFIG_SMP
      scripts/config --enable CONFIG_SCHED_MC_PRIO
      scripts/config --enable CONFIG_SCHED_MUQSS
      scripts/config --disable CONFIG_RQ_NONE
      scripts/config --enable CONFIG_RQ_SMT
      scripts/config --disable CONFIG_RQ_MC
      scripts/config --disable CONFIG_RQ_MC_LLC
      scripts/config --disable CONFIG_RQ_SMP
      scripts/config --disable CONFIG_RQ_ALL
      scripts/config --set-val CONFIG_SHARERQ 1
    elif [[ $_config_rq = "mc" ]]; then
      scripts/config --enable CONFIG_SCHED_MC
      scripts/config --enable CONFIG_SCHED_SMT
      scripts/config --enable CONFIG_SMP
      scripts/config --enable CONFIG_SCHED_MC_PRIO
      scripts/config --enable CONFIG_SCHED_MUQSS
      scripts/config --disable CONFIG_RQ_NONE
      scripts/config --disable CONFIG_RQ_SMT
      scripts/config --enable CONFIG_RQ_MC
      scripts/config --disable CONFIG_RQ_MC_LLC
      scripts/config --disable CONFIG_RQ_SMP
      scripts/config --disable CONFIG_RQ_ALL
      scripts/config --set-val CONFIG_SHARERQ 2
    elif [[ $_config_rq = "mc_llc" ]]; then
      scripts/config --enable CONFIG_SCHED_MC
      scripts/config --enable CONFIG_SCHED_SMT
      scripts/config --enable CONFIG_SMP
      scripts/config --enable CONFIG_SCHED_MC_PRIO
      scripts/config --enable CONFIG_SCHED_MUQSS
      scripts/config --disable CONFIG_RQ_NONE
      scripts/config --disable CONFIG_RQ_SMT
      scripts/config --disable CONFIG_RQ_MC
      scripts/config --enable CONFIG_RQ_MC_LLC
      scripts/config --disable CONFIG_RQ_SMP
      scripts/config --disable CONFIG_RQ_ALL
      scripts/config --set-val CONFIG_SHARERQ 3
    elif [[ $_config_rq = "smp" ]]; then
      scripts/config --enable CONFIG_SCHED_MC
      scripts/config --enable CONFIG_SCHED_SMT
      scripts/config --enable CONFIG_SMP
      scripts/config --enable CONFIG_SCHED_MC_PRIO
      scripts/config --enable CONFIG_SCHED_MUQSS
      scripts/config --disable CONFIG_RQ_NONE
      scripts/config --disable CONFIG_RQ_SMT
      scripts/config --disable CONFIG_RQ_MC
      scripts/config --disable CONFIG_RQ_MC_LLC
      scripts/config --enable CONFIG_RQ_SMP
      scripts/config --disable CONFIG_RQ_ALL
      scripts/config --set-val CONFIG_SHARERQ 4
    elif [[ $_config_rq = "all" ]]; then
      scripts/config --enable CONFIG_SCHED_MC
      scripts/config --enable CONFIG_SCHED_SMT
      scripts/config --enable CONFIG_SMP
      scripts/config --enable CONFIG_SCHED_MC_PRIO
      scripts/config --enable CONFIG_SCHED_MUQSS
      scripts/config --disable CONFIG_RQ_NONE
      scripts/config --disable CONFIG_RQ_SMT
      scripts/config --disable CONFIG_RQ_MC
      scripts/config --disable CONFIG_RQ_MC_LLC
      scripts/config --disable CONFIG_RQ_SMP
      scripts/config --enable CONFIG_RQ_ALL
      scripts/config --set-val CONFIG_SHARERQ 5
    fi
  elif [[ $_cpu_sched = "bmq" ]]; then
    msg2 "Enable CONFIG_SCHED_ALT, this feature enable alternative CPU scheduler..."
    scripts/config --enable CONFIG_SCHED_ALT
    msg2 "Enable BMQ CPU scheduler..."
    scripts/config --enable CONFIG_SCHED_BMQ
    scripts/config --disable CONFIG_SCHED_PDS
  elif [[ $_cpu_sched = "pds" ]]; then
    msg2 "Enable CONFIG_SCHED_ALT, this feature enable alternative CPU scheduler..."
    scripts/config --enable CONFIG_SCHED_ALT
    msg2 "Enable PDS CPU scheduler..."
    scripts/config --disable CONFIG_SCHED_BMQ
    scripts/config --enable CONFIG_SCHED_PDS
  fi

  # Let's user choose microarchitecture optimization in GCC
  sh ${srcdir}/choose-gcc-optimization.sh $_microarchitecture

  # Setting localversion
  msg2 "Setting localversion..."
  scripts/setlocalversion --save-scmversion
  echo "-${pkgbase}" > localversion

  # Config
  if [[ "$_config" = "nconfig" ]]; then
    msg2 "make nconfig..."
    if [[ "$_compiler" = "gcc" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} nconfig
    elif [[ "$_compiler" = "gcc+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} nconfig
    elif [[ "$_compiler" = "clang" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} nconfig
    elif [[ "$_compiler" = "clang+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} nconfig
    fi
  elif [[ "$_config" = "menuconfig" ]]; then
    msg2 "make menuconfig..."
    if [[ "$_compiler" = "gcc" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} menuconfig
    elif [[ "$_compiler" = "gcc+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} menuconfig
    elif [[ "$_compiler" = "clang" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} menuconfig
    elif [[ "$_compiler" = "clang+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} menuconfig
    fi
  elif [[ "$_config" = "xconfig" ]]; then
    msg2 "make xconfig..."
    if [[ "$_compiler" = "gcc" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} xconfig
    elif [[ "$_compiler" = "gcc+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} xconfig
    elif [[ "$_compiler" = "clang" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} xconfig
    elif [[ "$_compiler" = "clang+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} xconfig
    fi
  elif [[ "$_config" = "gconfig" ]]; then
    msg2 "make gconfig..."
    if [[ "$_compiler" = "gcc" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} gconfig
    elif [[ "$_compiler" = "gcc+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} gconfig
    elif [[ "$_compiler" = "clang" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} gconfig
    elif [[ "$_compiler" = "clang+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} gconfig
    fi
  elif [[ "$_config" = "olddefconfig" ]]; then
    msg2 "make olddefconfig..."
    if [[ "$_compiler" = "gcc" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} olddefconfig
    elif [[ "$_compiler" = "gcc+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} olddefconfig
    elif [[ "$_compiler" = "clang" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} olddefconfig
    elif [[ "$_compiler" = "clang+llvm" ]]; then
      make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} olddefconfig
    fi
  fi

  make -s kernelrelease > version
  msg2 "Prepared $pkgbase version $(<version)"
}

build(){
  cd linux-${pkgver}

  # make -j$(nproc) all
  msg2 "make -j$(nproc) all..."
  if [[ "$_compiler" = "gcc" ]]; then
    make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} -j$(nproc) all
  elif [[ "$_compiler" = "gcc+llvm" ]]; then
    make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} -j$(nproc) all
  elif [[ "$_compiler" = "clang" ]]; then
    make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} -j$(nproc) all
  elif [[ "$_compiler" = "clang+llvm" ]]; then
    make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} -j$(nproc) all
  fi
}

_package(){
  if [[ $_cpu_sched = "cachy" ]]; then
    pkgdesc="Stable linux kernel and modules with Cachy CPU Scheduler patch by Hamad Al Marri with a set of patches by TK-Glitch and Piotr Górski ${buildwith}"
  elif [[ $_cpu_sched = "muqss" ]]; then
    pkgdesc="Stable linux kernel and modules with MuQSS CPU Scheduler patch by Con Kolivas with a set of patches by TK-Glitch and Piotr Górski ${buildwith}"
  elif [[ $_cpu_sched = "bmq" ]]; then
    pkgdesc="Stable linux kernel and modules with BMQ CPU Scheduler patch by Alfred Chen with a set of patches by TK-Glitch and Piotr Górski ${buildwith}"
  elif [[ $_cpu_sched = "pds" ]]; then
    pkgdesc="Stable linux kernel and modules with PDS CPU Scheduler patch by Alfred Chen with a set of patches by TK-Glitch and Piotr Górski ${buildwith}"
  elif [[ $_cpu_sched = "none" ]]; then
    pkgdesc="Stable linux kernel and modules with a set of patches by TK-Glitch and Piotr Górski ${buildwith}"
  fi
  depends=("coreutils" "kmod" "initramfs" "mkinitcpio")
  optdepends=("linux-firmware: firmware images needed for some devices"
              "crda: to set the correct wireless channels of your country")
  provides=("VIRTUALBOX-GUEST-MODULES" "WIREGUARD-MODULE")

  cd linux-${pkgver}

  local kernver="$(<version)"
  local modulesdir="${pkgdir}"/usr/lib/modules/${kernver}

  # install bzImage to "${pkgdir}"/boot/
  msg2 "install bzImage to "${pkgdir}"/boot/ ..."
  install -Dm644 arch/${ARCH}/boot/bzImage "${pkgdir}"/boot/vmlinuz-${pkgbase}

  msg2 "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  #install -Dm644 "$(make -s image_name)" -j$(nrpoc) "$modulesdir/vmlinuz"
  install -Dm644 arch/${ARCH}/boot/bzImage "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  msg2 "Installing modules..."
  if [[ "$_compiler" = "gcc" ]]; then
    make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} INSTALL_MOD_PATH="${pkgdir}"/usr INSTALL_MOD_STRIP=1 -j$(nproc) modules_install
  elif [[ "$_compiler" = "gcc+llvm" ]]; then
    make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} INSTALL_MOD_PATH="${pkgdir}"/usr INSTALL_MOD_STRIP=1 -j$(nproc) modules_install
  elif [[ "$_compiler" = "clang" ]]; then
    make ARCH=${ARCH} CC=${CC} CXX=${CXX} HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} INSTALL_MOD_PATH="${pkgdir}"/usr INSTALL_MOD_STRIP=1 -j$(nproc) modules_install
  elif [[ "$_compiler" = "clang+llvm" ]]; then
    make ARCH=${ARCH} CC=${CC} CXX=${CXX} LLVM=1 LLVM_IAS=1 HOSTCC=${HOSTCC} HOSTCXX=${HOSTCXX} INSTALL_MOD_PATH="${pkgdir}"/usr INSTALL_MOD_STRIP=1 -j$(nproc) modules_install
  fi

  # Remove build dir and source dir
  msg2 "Remove build dir and source dir..."
  #rm -rf "$modulesdir"/build
  #rm -rf "$modulesdir"/source
  
  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers(){
  pkgdesc="Headers and scripts for building modules for the ${pkgbase} package"
  depends=("${pkgbase}")

  cd linux-${pkgver}

  local builddir="$pkgdir"/usr/lib/modules/"$(<version)"/build

  msg2 "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map vmlinux localversion version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  msg2 "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  msg2 "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  msg2 "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    msg2 "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  msg2 "Removing documentation..."
  rm -r "$builddir/Documentation"

  msg2 "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  msg2 "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  msg2 "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  msg2 "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  msg2 "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}
