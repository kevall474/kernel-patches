From 1a2a0e2ca14bb3203eefb46f0641ed6d3ec929c9 Mon Sep 17 00:00:00 2001
From: Alexandre Frade <kernel@xanmod.org>
Date: Wed, 30 Jun 2021 19:40:01 +0000
Subject: [PATCH] futex2: fix shared futex2 pgoff on shmem huge page

This commit is based on the commit fe19bd3dae3d15d2fbfdb3de8839a6ea0fe94264
original for futex.

If more than one futex2 is placed on a shmem huge page, it can happen
that waking the second wakes the first instead, and leaves the second
waiting: the key's index is wrong.

When 3.11 commit 13d60f4b6ab5 ("futex: Take hugepages into account when
generating futex_key"), the only shared huge pages came from hugetlbfs,
and the code added to deal with its exceptional page->index was put into
hugetlb source.  Then that was missed when 4.8 added shmem huge pages.

page_to_pgoff() is what others use for this nowadays: except that, as
currently written, it gives the right answer on hugetlbfs head, but
nonsense on hugetlbfs tails.  Fix that by calling hugetlbfs-specific
hugetlb_basepage_index() on PageHuge tails as well as on head.

Yes, it's unconventional to declare hugetlb_basepage_index() there in
pagemap.h, rather than in hugetlb.h; but I do not expect anything but
page_to_pgoff() ever to need it.

[akpm@linux-foundation.org: give hugetlb_basepage_index() prototype the correct scope]

Link: https://lkml.kernel.org/r/b17d946b-d09-326e-b42a-52884c36df32@google.com
Fixes: 800d8c63b2e9 ("shmem: add huge pages support")
Reported-by: Neel Natu <neelnatu@google.com>
Signed-off-by: Alexandre Frade <kernel@xanmod.org>
---
 kernel/futex2.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kernel/futex2.c b/kernel/futex2.c
index d686eebd6a51..be8475f9df9d 100644
--- a/kernel/futex2.c
+++ b/kernel/futex2.c
@@ -311,7 +311,7 @@ static int futex_get_shared_key(uintptr_t address, struct mm_struct *mm,
 		}
 
 		key->pointer = futex_get_inode_uuid(inode);
-		key->index = (unsigned long)hugetlb_basepage_index(tail);
+		key->index = (unsigned long)page_to_pgoff(tail);
 		key->offset |= FUT_OFF_INODE;
 
 		rcu_read_unlock();
-- 
GitLab

